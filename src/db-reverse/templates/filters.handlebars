{{#*inline "Import"}}
import {{localImport (toFiltersName .)}} from "../{{toEntityDirectoryName .}}/{{toFileName .}}.filter";
{{/inline}}

{{#*inline "Column"}}
{{#generated}}@Field((type)=> FilteredID, {nullable: true}){{/generated}}
{{^generated}}@Field((type)=>
{{#if (eq tscType "string")}} FilteredString
{{else if (eq tscType "number")}} FilteredFloat
{{else if (eq tscType "Date")}} FilteredDate
{{else if (eq tscType "boolean")}} FilteredBoolean
{{/if}}
,{ nullable: true })
{{/generated}}
{{toPropertyName tscName}}?:{{tscType}};
{{/inline}}

{{#*inline "Relation"}}
@Field((type) => {{toGraphQLFilterRelation (toEntityName relatedTable) relationType}}, { nullable: true })
{{printPropertyVisibility}}{{toPropertyName fieldName}}?:{{toGraphQLFilterRelationType (toEntityName relatedTable) relationType}};
{{/inline}}


{{#*inline "Filters"}}
@InputType()
export {{defaultExport}} class {{toFiltersName tscName}} extends BaseFilterFields {

@Field((type) => [{{toFiltersName tscName}}], { nullable: true })
or?: {{toFiltersName tscName}}[];

@Field((type) => [{{toFiltersName tscName}}], { nullable: true })
and?: {{toFiltersName tscName}}[];

{{#columns}}{{> Column}}{{/columns~}}
{{#relations}}{{> Relation}}{{/relations~}}

}
{{/inline}}

import {InputType,Field} from "type-graphql";
import { BaseFilterFields, FilteredID, FilteredInt, FilteredFloat, FilteredBoolean, FilteredDate, FilteredString } from "merlin-gql";
{{#fileImports}}{{> Import}}{{/fileImports}}

{{> Filters}}